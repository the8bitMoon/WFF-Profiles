{"version":3,"sources":["components/Profiles.jsx","components/Profile.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Profiles","state","data","Tabletop","init","key","simpleSheet","prettyColumnNames","callback","googleData","setState","elements","this","console","log","map","obj","props","imagelink","rowNumber","src","name","status","discordtag","formattedheight","formattedweight","divisionnumber","divisiondescription","connectiontoworldwidefuturefoundation","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kdAIqBA,E,YACpB,aAAe,IAAD,8BACb,+CACKC,MAAQ,CACZC,KAAM,IAHM,E,iFAOO,IAAD,OACnBC,IAASC,KAAK,CACbC,IAAK,uGACLC,aAAa,EACbC,mBAAmB,EACnBC,SAAU,SAAAC,GACF,EAAKC,SAAS,CACZR,KAAMO,EAAW,mBAAmBE,gB,+BAKtC,IACDT,EAASU,KAAKX,MAAdC,KAER,OADAW,QAAQC,IAAI,aAAWZ,GAEtB,8BACEA,EAAKa,KAAI,SAAAC,GAAG,OC3BeC,ED2BHD,GC1BUE,UAErC,6BAASb,IAAKY,EAAME,WACnB,gCAAQ,yBAAKC,IAAKH,EAAMC,aACxB,iCAAS,oCAAa,2BAAID,EAAMI,OAChC,iCAAS,sCAAe,2BAAIJ,EAAMK,SAClC,iCAAS,yCAAkB,2BAAIL,EAAMM,aACrC,iCAAS,sCAAe,2BAAIN,EAAMO,kBAClC,iCAAS,sCAAe,2BAAIP,EAAMQ,kBAClC,iCAAS,4BAAKR,EAAMS,gBAAoB,2BAAIT,EAAMU,sBAClD,iCAAS,qCAAc,2BAAIV,EAAMW,yCAXrB,IAAiBX,U,GDEMY,aEcvBC,MAbf,WACE,OACA,yBAAKC,UAAU,WACd,gCACC,4EAED,8BACC,kBAAC,EAAD,SCAgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.580454ae.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Tabletop from 'tabletop';\r\nimport Profile from './Profile.jsx';\r\n\r\nexport default class Profiles extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tdata: []\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tTabletop.init({\r\n\t\t\tkey: 'https://docs.google.com/spreadsheets/d/1RMkKMmpACwE3PHbrU44vNdDsWwLmBwL-FwMzAk6lf8o/edit?usp=sharing',\r\n\t\t\tsimpleSheet: false,\r\n\t\t\tprettyColumnNames: false,\r\n\t\t\tcallback: googleData => {\r\n\t          this.setState({\r\n\t            data: googleData['Public Profiles'].elements\r\n\t          })\r\n\t        }\r\n\t\t})\r\n\t}\r\n\trender() {\r\n\t\tconst { data } = this.state;\r\n\t\tconsole.log('data-->', data);\r\n\t\treturn(\r\n\t\t\t<main>\r\n\t\t\t\t{data.map(obj => Profile(obj))}\r\n\t\t\t</main>\r\n\t\t)\r\n\t}\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Profile(props){\r\n\tconst image = {backgroundImage: props.imagelink}\r\n\treturn(\r\n\t\t<article key={props.rowNumber}>\r\n\t\t\t<figure><img src={props.imagelink} /></figure>\r\n\t\t\t<section><h3>Name</h3><p>{props.name}</p></section>\r\n\t\t\t<section><h3>Status</h3><p>{props.status}</p></section>\r\n\t\t\t<section><h3>Member ID</h3><p>{props.discordtag}</p></section>\r\n\t\t\t<section><h3>Height</h3><p>{props.formattedheight}</p></section>\r\n\t\t\t<section><h3>Weight</h3><p>{props.formattedweight}</p></section>\r\n\t\t\t<section><h3>{props.divisionnumber}</h3><p>{props.divisiondescription}</p></section>\r\n\t\t\t<section><h3>Notes</h3><p>{props.connectiontoworldwidefuturefoundation}</p></section>\r\n\t\t</article>\r\n\t)\r\n}\r\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Profiles from './components/Profiles.jsx';\n\nfunction App() {\n \treturn (\n\t\t<div className=\"App crt\">\n\t\t\t<header>\n\t\t\t\t<h1>Worldwide Future Foundation Member Profiles</h1>\n\t\t\t</header>\n\t\t\t<main>\n\t\t\t\t<Profiles />\n\t\t\t</main>\n\t\t</div>\n \t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}